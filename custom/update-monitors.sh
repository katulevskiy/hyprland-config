#!/usr/bin/env bash

# This script generates a Hyprland monitor and workspace configuration
# based on connected displays. It intelligently selects the best resolution
# and refresh rate, and positions monitors from largest to smallest, left to right.

# --- CONFIGURATION ---
# Set the number of workspaces you want per monitor.
WORKSPACES_PER_MONITOR=10
# Set the path for the generated config file.
CONFIG_FILE="$HOME/.config/hypr/custom/monitors.conf"
# ---

# Ensure jq is installed
if ! command -v jq &>/dev/null; then
  echo "Error: jq is not installed. Please install it to use this script."
  exit 1
fi

# Clear the existing config file and add a header
>"$CONFIG_FILE"
echo "# AUTOGENERATED by generate-monitor-config.sh" >>"$CONFIG_FILE"
echo "# DO NOT EDIT THIS FILE DIRECTLY" >>"$CONFIG_FILE"
echo "" >>"$CONFIG_FILE"

# The core logic using jq to process monitor data.
# 1. map(.): Process each monitor object from the input array.
# 2. best_mode: Create a new field to store the calculated best mode.
# 3. .availableModes | map(...): For each mode string (e.g., "1920x1080@60.00Hz")...
#    - Split it into components (width, height, refresh rate) and convert to numbers.
# 4. sort_by(-(.w * .h), -.r): Sort the modes first by resolution (descending),
#    then by refresh rate (descending).
# 5. .[0]: Select the first element, which is the best mode.
# 6. sort_by(-.best_mode.w * .best_mode.h): Sort the monitors themselves by
#    the resolution of their best mode (descending).
MONITOR_DATA=$(
  hyprctl -j monitors | jq -c '
    map(
      . + {
        best_mode: (
          .availableModes |
          map(
            split("@") |
            {
              mode_str: .,
              w: (.[0] | split("x")[0] | tonumber),
              h: (.[0] | split("x")[1] | tonumber),
              r: (.[1] | sub("Hz"; "") | tonumber)
            }
          ) |
          sort_by(-(.w * .h), -.r) |
          .[0]
        )
      }
    ) |
    sort_by(-(.best_mode.w * .best_mode.h))
  '
)

# --- Generate monitor configuration ---
echo "# Monitor Configuration (Largest to Smallest, Left to Right)" >>"$CONFIG_FILE"
CURRENT_X_OFFSET=0
# Loop through the JSON array of sorted monitors processed by jq
echo "$MONITOR_DATA" | jq -c '.[]' | while read -r monitor_json; do
  # Extract details for the current monitor
  NAME=$(echo "$monitor_json" | jq -r '.name')
  WIDTH=$(echo "$monitor_json" | jq -r '.best_mode.w')
  HEIGHT=$(echo "$monitor_json" | jq -r '.best_mode.h')
  REFRESH_RATE=$(echo "$monitor_json" | jq -r '.best_mode.r | floor')

  # Generate the monitor line with the calculated position
  echo "monitor=$NAME,${WIDTH}x${HEIGHT}@${REFRESH_RATE},${CURRENT_X_OFFSET}x0,1" >>"$CONFIG_FILE"

  # Update the X offset for the next monitor
  CURRENT_X_OFFSET=$((CURRENT_X_OFFSET + WIDTH))
done
echo "" >>"$CONFIG_FILE"

# --- Generate workspace assignments ---
WORKSPACE_OFFSET=0
# Get the names of the monitors in their sorted order
SORTED_MONITOR_NAMES=$(echo "$MONITOR_DATA" | jq -r '.[].name')

for MONITOR in $SORTED_MONITOR_NAMES; do
  echo "# Workspaces for monitor $MONITOR" >>"$CONFIG_FILE"
  for i in $(seq 1 $WORKSPACES_PER_MONITOR); do
    WORKSPACE_NUM=$((WORKSPACE_OFFSET + i))

    # Your original script made all workspaces default, preserving that.
    # The first workspace (1) will be the true default on session start.
    if [ "$WORKSPACE_NUM" -eq 1 ]; then
      echo "workspace = $WORKSPACE_NUM, monitor:$MONITOR, default:true" >>"$CONFIG_FILE"
    else
      echo "workspace = $WORKSPACE_NUM, monitor:$MONITOR, default:true" >>"$CONFIG_FILE"
    fi
  done
  WORKSPACE_OFFSET=$((WORKSPACE_OFFSET + WORKSPACES_PER_MONITOR))
  echo "" >>"$CONFIG_FILE"
done

echo "Hyprland monitor config generated at $CONFIG_FILE"
